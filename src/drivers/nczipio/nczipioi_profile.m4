dnl Process this m4 file to produce 'C' language file.
dnl
dnl If you see this line, you can ignore the next one.
/* Do not edit this file. It is produced from the corresponding .m4 source */
dnl
/*
 *  Copyright (C) 2019, Northwestern University and Argonne National Laboratory
 *  See COPYRIGHT notice in top-level directory.
 */
/* $Id$ */
dnl
include(`foreach.m4')dnl
include(`utils.m4')dnl
include(`nczipioi_profile_timers.m4')dnl
define(`upcase', `translit(`$*', `a-z', `A-Z')')dnl
dnl
define(`CONCATE',dnl
`dnl
    $1$2')dnl
define(`PRINTNAME',dnl
`dnl
            fprintf(pfile, "$1, ");
')dnl
define(`PRINTTIME',dnl
`dnl
            printf("#%%$: $1_time_mean %lf\n", tmean[$2]);
            printf("#%%$: $1_time_max %lf\n", tmax[$2]);
            printf("#%%$: $1_time_min %lf\n", tmin[$2]);
            printf("#%%$: $1_time_var %lf\n\n", tvar[$2]);
')dnl
define(`PRINTTIMEMEAN',dnl
`dnl
            printf("#%%$: $1_time_mean %lf\n", tmean[$2]);
')dnl
define(`PRINTTIMEVAR',dnl
`dnl
            printf("#%%$: $1_time_var %lf\n", tvar[$2]);
')dnl
define(`PRINTTIMEMAX',dnl
`dnl
            printf("#%%$: $1_time_max %lf\n", tmax[$2]);
')dnl
define(`PRINTTIMEMIN',dnl
`dnl
            printf("#%%$: $1_time_min %lf\n", tmin[$2]);
')dnl

#ifdef HAVE_CONFIG_H
# include <config.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <mpi.h>

#include <pnc_debug.h>
#include <common.h>
#include <nczipio_driver.h>
#include "nczipio_internal.h"

/*
 * Report performance profiling
 */
#ifdef PNETCDF_PROFILING
int nczipioi_print_profile(NC_zip *nczipp){
    int err;
    int i, j;
    double tmax[NTIMER], tmin[NTIMER], tmean[NTIMER], tvar[NTIMER], tvar_local[NTIMER + 3];
    char *pprefix = getenv("PNETCDF_PROFILE_PREFIX");

    CHK_ERR_REDUCE(nczipp->profile.tt, tmax, NTIMER, MPI_DOUBLE, MPI_MAX, 0, nczipp->comm);
    CHK_ERR_REDUCE(nczipp->profile.tt, tmin, NTIMER, MPI_DOUBLE, MPI_MIN, 0, nczipp->comm);
    CHK_ERR_ALLREDUCE(nczipp->profile.tt, tmean, NTIMER, MPI_DOUBLE, MPI_SUM, nczipp->comm);
    for(i = 0; i < NTIMER; i++){
        tmean[i] /= nczipp->np;
        tvar_local[i] = (nczipp->profile.tt[i] - tmean[i]) * (nczipp->profile.tt[i] - tmean[i]);
    }
    CHK_ERR_REDUCE(tvar_local, tvar, NTIMER, MPI_DOUBLE, MPI_SUM, 0, nczipp->comm);
    
    if (nczipp->rank == 0){
        for(i = 0; i < NTIMER; i++){
            tvar[i] /= nczipp->np;
        }

foreach(`t', TIMERS, `PRINTTIME(translit(t, `()'))')dnl
    }

    if (ppath != NULL && *ppath != '0') {
        MPI_Status stat;

        memcpy(tvar_local + 3, nczipp->profile.tt, sizeof(double) * NTIMER);
        tvar_local[0] = (double)nczipp->putsize / 1048576.0f;
        tvar_local[1] = (double)nczipp->getsize / 1048576.0f;
        tvar_local[2] = (double)nczipp->nmychunks;

        if (nczipp->rank == 0){                        
            FILE *pfile;
            char fname[1024];

            strcpy(fname, nczipp->path);
            for(i = strlen(fname); i > 0; i--){
                if (fname[i] == '.'){
                    fname[i] = '\0';
                }
                else if (fname[i] == '\\' || fname[i] == '/'){
                    i++;
                    break;
                }
            }
            sprintf(ppath, "%s%s_profile.csv", pprefix, fname + i);
            pfile = fopen(ppath, "w");

            fprintf(pfile, "rank, putsize, getsize, nchunk, ");
foreach(`t', TIMERS, `PRINTNAME(translit(t, `()'))')dnl
            fprintf(pfile, "\n");

            fprintf(pfile, "mean, , , , ");
            for(j = 0; j < NTIMER; j++){
                fprintf(pfile, "%lf, ", tmean[j]);
            }
            fprintf(pfile, "\n");

            fprintf(pfile, "max, , , , ");
            for(j = 0; j < NTIMER; j++){
                fprintf(pfile, "%lf, ", tmax[j]);
            }
            fprintf(pfile, "\n");

            fprintf(pfile, "min, , , ,");
            for(j = 0; j < NTIMER; j++){
                fprintf(pfile, "%lf, ", tmin[j]);
            }
            fprintf(pfile, "\n");

            fprintf(pfile, "var, , , ,");
            for(j = 0; j < NTIMER; j++){
                fprintf(pfile, "%lf, ", tvar[j]);
            }
            fprintf(pfile, "\n");

            fprintf(pfile, "0, ");

            for(j = 0; j < NTIMER + 3; j++){
                fprintf(pfile, "%lf, ", tvar_local[j]);
            }
            fprintf(pfile, "\n");

            for(i = 1; i < nczipp->np; i++){
                MPI_Recv(tvar_local, NTIMER + 3, MPI_DOUBLE, i, 0, nczipp->comm, &stat);
                fprintf(pfile, "%d, ", i);
                for(j = 0; j < NTIMER + 3; j++){
                    fprintf(pfile, "%lf, ", tvar_local[j]);
                }
                fprintf(pfile, "\n");
            }

            fclose(pfile);
        }
        else{
            MPI_Send(tvar_local, NTIMER + 3, MPI_DOUBLE, 0, 0, nczipp->comm);
        }
    }            
}
#endif




