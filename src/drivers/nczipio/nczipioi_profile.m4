dnl Process this m4 file to produce 'C' language file.
dnl
dnl If you see this line, you can ignore the next one.
/* Do not edit this file. It is produced from the corresponding .m4 source */
dnl
/*
 *  Copyright (C) 2021, Northwestern University and Argonne National Laboratory
 *  See COPYRIGHT notice in top-level directory.
 */
/* $Id$ */
dnl
include(`foreach.m4')`'dnl
include(`foreach_idx.m4')`'dnl
include(`list_len.m4')`'dnl
include(`utils.m4')`'dnl
include(`nczipioi_profile_timers.m4')`'dnl
define(`upcase', `translit(`$*', `a-z', `A-Z')')`'dnl
define(`CONCATE',`$1$2')`'dnl
changecom(`##', `')`'dnl
dnl
#ifdef HAVE_CONFIG_H
# include <config.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <mpi.h>

#include <pnc_debug.h>
#include <common.h>
#include <nczipio_driver.h>
#include "nczipio_internal.h"
#include "nczipioi_profile.h"

/*
 * Report performance profiling
 */
#ifdef PNETCDF_PROFILING

static double tmax[NC_ZIP_NTIMER], tmin[NC_ZIP_NTIMER], tmean[NC_ZIP_NTIMER], tvar[NC_ZIP_NTIMER], tvar_local[NC_ZIP_NTIMER];

const char * const tname[NC_ZIP_NTIMER]={
foreach(`t', NC_ZIP_TIMERS, `"CONCATE(`nc_zip_timer_', t)",
')dnl
};

void nczipioi_profile_add_time (NC_zip *nczipp, int id, double t) {
	assert (id >= 0 && id < NC_ZIP_NTIMER);
	nczipp->profile.tt[id] += t;
	nczipp->profile.cnt[id]++;
}

int nczipioi_print_profile(NC_zip *nczipp){
    int i;

	MPI_Reduce (nczipp->profile.tt, tmax, NC_ZIP_NTIMER, MPI_DOUBLE, MPI_MAX, 0, nczipp->comm);
	MPI_Reduce (nczipp->profile.tt, tmin, NC_ZIP_NTIMER, MPI_DOUBLE, MPI_MIN, 0, nczipp->comm);
	MPI_Allreduce (nczipp->profile.tt, tmean, NC_ZIP_NTIMER, MPI_DOUBLE, MPI_SUM, nczipp->comm);
	for (i = 0; i < NC_ZIP_NTIMER; i++) {
		tmean[i] /= nczipp->np;
		tvar_local[i] = (nczipp->profile.tt[i] - tmean[i]) * (nczipp->profile.tt[i] - tmean[i]);
	}
	MPI_Reduce (tvar_local, tvar, NC_ZIP_NTIMER, MPI_DOUBLE, MPI_SUM, 0, nczipp->comm);

	if (nczipp->rank == 0) {
		for (i = 0; i < NC_ZIP_NTIMER; i++) {
			printf ("#%%$: %s_time_mean: %lf\n", tname[i], tmean[i]);
			printf ("#%%$: %s_time_max: %lf\n", tname[i], tmax[i]);
			printf ("#%%$: %s_time_min: %lf\n", tname[i], tmin[i]);
			printf ("#%%$: %s_time_var: %lf\n\n", tname[i], tvar[i]);
		}
	}

	MPI_Reduce (nczipp->profile.cnt, tmax, NC_ZIP_NTIMER, MPI_DOUBLE, MPI_MAX, 0, nczipp->comm);
	MPI_Reduce (nczipp->profile.cnt, tmin, NC_ZIP_NTIMER, MPI_DOUBLE, MPI_MIN, 0, nczipp->comm);
	MPI_Allreduce (nczipp->profile.cnt, tmean, NC_ZIP_NTIMER, MPI_DOUBLE, MPI_SUM, nczipp->comm);
	for (i = 0; i < NC_ZIP_NTIMER; i++) {
		tmean[i] /= nczipp->np;
		tvar_local[i] = (nczipp->profile.cnt[i] - tmean[i]) * (nczipp->profile.cnt[i] - tmean[i]);
	}
	MPI_Reduce (tvar_local, tvar, NC_ZIP_NTIMER, MPI_DOUBLE, MPI_SUM, 0, nczipp->comm);

	if (nczipp->rank == 0) {
		for (i = 0; i < NC_ZIP_NTIMER; i++) {
			printf ("#%%$: %s_count_mean: %lf\n", tname[i], tmean[i]);
			printf ("#%%$: %s_count_max: %lf\n", tname[i], tmax[i]);
			printf ("#%%$: %s_count_min: %lf\n", tname[i], tmin[i]);
			printf ("#%%$: %s_count_var: %lf\n\n", tname[i], tvar[i]);
		}
	}          
}
#endif




